services:
  api_gateway:
    image: node:alpine
    container_name: api_gateway
    working_dir: /app
    volumes:
      - ./Backend/api_gateway:/app
      - /app/node_modules
    ports:
      - 3000:3000
    networks:
      - btp_db_network
    command: sh -c "npm install && npm run start:dev"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3

  authentification_service:
    image: node:alpine
    container_name: authentification_service
    working_dir: /app
    volumes:
      - ./Backend/authentification_service:/app
      - /app/node_modules
    ports:
      - 3001:3001
    networks:
      - btp_db_network
    environment:
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=dev
      - PG_PASSWORD=password
      - PG_DATABASE=btp_db
    command: sh -c "npm install && npm run start:dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api_gateway:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  users_service:
    image: node:alpine
    container_name: users_service
    working_dir: /app
    volumes:
      - ./Backend/users_service:/app
      - /app/node_modules
    ports:
      - 3002:3002
    networks:
      - btp_db_network
    environment:
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=dev
      - PG_PASSWORD=password
      - PG_DATABASE=btp_db
      - REDIS_URL=redis://redis:6379
    command: sh -c "npm install && npm run start:dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api_gateway:3000/users/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:latest
    container_name: postgres
    networks:
      - btp_db_network
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: password
      POSTGRES_DB: btp_db
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./Conception/Database:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d btp_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: btp_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - btp_db_network
    ports:
      - "5050:80"
    restart: always


  messagerie_service:
    image: node:alpine
    container_name: messagerie_service
    working_dir: /app
    volumes:
      - ./Backend/messagerie_service:/app
      - /app/node_modules
    ports:
      - 3333:3333
    networks:
      - btp_db_network
    environment:
      MONGO_URL: "mongodb://admin:secret@mongo_db:27017/messagerie_db?authSource=admin"
      REDIS_URL: "redis://redis:6379"
    command: sh -c "npm install && npm run start:dev"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://api_gateway:3000/messages/health"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    # depends_on:
    #   mongo_db:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy

  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./Conception/Messagerie_db/:/docker-entrypoint-initdb.d
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    command: ["mongod", "--bind_ip_all"]
    healthcheck:
      test: ["CMD", "mongosh", "--username", "admin", "--password", "secret", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - btp_db_network


  mongo_express:
    image: mongo-express:latest
    container_name: mongo_express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo_db
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_OPTIONS_EDITORTHEME: "default" 
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: secret
    ports:
      - "8081:8081"
    depends_on:
      - mongo_db
    networks:
      - btp_db_network

  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - btp_db_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  btp_db_network:
    driver: bridge
    attachable: true

volumes:
  pg_data:
  mongo_data:
